[{"path":"https://netcoupler.github.io/NetCoupler/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to NetCoupler","title":"Contributing to NetCoupler","text":"outlines propose change NetCoupler. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to NetCoupler","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to NetCoupler","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://netcoupler.github.io/NetCoupler/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to NetCoupler","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"NetCoupler/NetCoupler\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to NetCoupler","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to NetCoupler","text":"Please note NetCoupler project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Clemens Wittenbecher; Luke Johnston Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/articles/NetCoupler.html","id":"overall-package-framework","dir":"Articles","previous_headings":"","what":"Overall package framework","title":"Getting started with NetCoupler","text":"NetCoupler several frameworks mind: Works magrittr %>% base R |> operator. Works tidyselect helpers (e.g. starts_with(), contains()). auto-complete friendly (e.g. start function names nc_). Inputs outputs functions tibbles/dataframes tidygraph tibbles. allows flexibility model can used (e.g. linear regression, cox models). Almost functionality modeling R available , instance handling missing data categorical variables.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/articles/NetCoupler.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Getting started with NetCoupler","text":"general workflow using NetCoupler revolves around several main functions, listed well visualized figure : nc_standardize(): algorithm general, especially network estimation method, sensitive values distribution variables. Scaling variables standardizing, mean-centering, natural log transforming important obtaining accurate estimations. plan implementing network estimators aside PC-algorithm point future. Setting threshold classifying effects direct, ambigious, none done argument classify_option_list. See help documentation estimating functions details. larger datasets, sample size variables included network, strongly recommend lowering threshold used reduce risk false positives. nc_join_links(): implemented yet. Join together exposure- outcome-side estimated links. nc_plot_network(): implemented yet. Visualize connections estimated nc_estimate_network(). nc_plot_links(): implemented yet. Plots output results either nc_estimate_exposure_links(), nc_estimate_outcome_links(), nc_join_links(). NetCoupler functions input ouput. Input output objects light gray boxes, light blue boxes currently available functions, light orange boxes functions planned developed.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/articles/NetCoupler.html","id":"simple-example","dir":"Articles","previous_headings":"","what":"Simple example","title":"Getting started with NetCoupler","text":"example using simulated dataset demonstrating NetCoupler. examples, particularly use different models, check vignette(\"examples\").","code":""},{"path":"https://netcoupler.github.io/NetCoupler/articles/NetCoupler.html","id":"estimating-the-metabolic-network","dir":"Articles","previous_headings":"Simple example","what":"Estimating the metabolic network","title":"Getting started with NetCoupler","text":"estimating network, ’s (basically) required standardize metabolic variables inputting nc_estimate_network(). function also log-transforms scales (mean-center z-score normalize) values metabolic variables. network estimation algorithm can sometimes finicky differences variable numerical scale (mean 1 vs mean 1000). potential confounders need adjust estimating links phase NetCoupler, ’ll need include confounding variables standardizing metabolic variables. regressing confounding variables metabolic variables using regressed_on argument nc_standardize(). automatically first standardize variables, run models metabolic variables includes confounding variables, extract residuals model used construct network. ’s example: , can estimate network. network default estimated using PC-algorithm. can read help page pc_estimate_undirected_graph() internal function.","code":"library(NetCoupler) std_metabolic_data <- simulated_data %>%      nc_standardize(starts_with(\"metabolite\")) std_metabolic_data <- simulated_data %>%      nc_standardize(starts_with(\"metabolite\"),                    regressed_on = \"age\") # Make partial independence network from metabolite data metabolite_network <- std_metabolic_data %>%      nc_estimate_network(starts_with(\"metabolite\"))"},{"path":"https://netcoupler.github.io/NetCoupler/articles/NetCoupler.html","id":"estimating-exposure-and-outcome-side-connections","dir":"Articles","previous_headings":"Simple example","what":"Estimating exposure and outcome-side connections","title":"Getting started with NetCoupler","text":"exposure outcome side, standardize metabolic variables, time, don’t regress confounders since included models. Now can estimate outcome exposure identify direct effects either exposure side (exposure -> metabolite) outcome side (metabolite -> outcome). exposure side, function identifies whether link exposure index node (one metabolic variable network) exists, independent potential confounders neighbouring nodes (metabolic variables linked index variable). Depending consistent strong link , effect classified “direct”, “ambiguous”, “none”. example , specifically generated simulated data exposure associated metabolites 1, 8, 12. can see, links correctly identified. want adjust confounders already used regressed_on nc_standardize() function, add confounders nc_estimate_outcome_links() nc_estimate_exposure_links() adjustment_vars argument:","code":"standardized_data <- simulated_data %>%      nc_standardize(starts_with(\"metabolite\")) outcome_estimates <- standardized_data %>%     nc_estimate_outcome_links(         edge_tbl = as_edge_tbl(metabolite_network),         outcome = \"outcome_continuous\",         model_function = lm     ) outcome_estimates #> # A tibble: 12 × 6 #>    outcome            index_node    estimate std_error fdr_p_value effect    #>  * <chr>              <chr>            <dbl>     <dbl>       <dbl> <chr>     #>  1 outcome_continuous metabolite_1   0.0466     0.0254   0.124     ambiguous #>  2 outcome_continuous metabolite_10  0.00449    0.0254   0.947     ambiguous #>  3 outcome_continuous metabolite_11 -0.00700    0.0254   0.912     none      #>  4 outcome_continuous metabolite_12  0.350      0.0242   0         direct    #>  5 outcome_continuous metabolite_2  -0.0280     0.0255   0.424     none      #>  6 outcome_continuous metabolite_3  -0.0936     0.0252   0.000620  direct    #>  7 outcome_continuous metabolite_4   0.0267     0.0256   0.453     ambiguous #>  8 outcome_continuous metabolite_5   0.103      0.0253   0.000167  ambiguous #>  9 outcome_continuous metabolite_6   0.113      0.0252   0.0000237 ambiguous #> 10 outcome_continuous metabolite_7   0.00171    0.0255   0.956     none      #> 11 outcome_continuous metabolite_8   0.0212     0.0253   0.548     none      #> 12 outcome_continuous metabolite_9   0.201      0.0250   0         direct  exposure_estimates <- standardized_data %>%     nc_estimate_exposure_links(         edge_tbl = as_edge_tbl(metabolite_network),         exposure = \"exposure\",         model_function = lm     ) exposure_estimates #> # A tibble: 12 × 6 #>    exposure index_node    estimate std_error fdr_p_value effect    #>  * <chr>    <chr>            <dbl>     <dbl>       <dbl> <chr>     #>  1 exposure metabolite_1   0.173      0.0228      0      direct    #>  2 exposure metabolite_10  0.318      0.0219      0      direct    #>  3 exposure metabolite_11  0.0543     0.0232      0.0409 ambiguous #>  4 exposure metabolite_12  0.0242     0.0231      0.380  none      #>  5 exposure metabolite_2  -0.0430     0.0231      0.106  ambiguous #>  6 exposure metabolite_3   0.0411     0.0231      0.123  ambiguous #>  7 exposure metabolite_4   0.00344    0.0232      0.920  none      #>  8 exposure metabolite_5   0.0479     0.0232      0.0717 ambiguous #>  9 exposure metabolite_6  -0.0189     0.0230      0.506  none      #> 10 exposure metabolite_7  -0.162      0.0229      0      direct    #> 11 exposure metabolite_8  -0.355      0.0216      0      direct    #> 12 exposure metabolite_9   0.0571     0.0230      0.0292 ambiguous outcome_estimates <- standardized_data %>%     nc_estimate_outcome_links(         edge_tbl = as_edge_tbl(metabolite_network),         outcome = \"outcome_continuous\",         model_function = lm,         adjustment_vars = \"age\"     )"},{"path":"https://netcoupler.github.io/NetCoupler/articles/NetCoupler.html","id":"slow-code-use-parallel-processing-with-future","dir":"Articles","previous_headings":"","what":"Slow code? Use parallel processing with future","title":"Getting started with NetCoupler","text":"analysis taking , can use future package speed things implementing parallel processing. ’s easy use parallel processing NetCoupler since uses future package. setting “processing plan” future::plan() multisession, NetCoupler use parallel processing computationally intensive component algorithm. run code, close parallel processing putting back normal plan(sequential). Using future package can speed processing almost 2.5 times.","code":"# You'll need to have furrr installed for this to work. library(future) plan(multisession) outcome_estimates <- standardized_data %>%     nc_estimate_outcome_links(         edge_tbl = as_edge_tbl(metabolite_network),         outcome = \"outcome_continuous\",         model_function = lm     ) plan(sequential)"},{"path":[]},{"path":"https://netcoupler.github.io/NetCoupler/articles/examples.html","id":"pre-processing","dir":"Articles","previous_headings":"","what":"Pre-processing","title":"Examples of using NetCoupler with different models","text":"First load packages. Pre-processing standardizing variables, since large differences values variables can impact results algorithm. Estimating network structure identify links metabolic variables. network needs converted edge table two columns, one source_node another target_node. adjusting confounders main models, also need included estimating network. , metabolic data needs regressed variables standardized.","code":"library(NetCoupler) library(dplyr) standardized_data <- simulated_data %>%     nc_standardize(starts_with(\"metabolite\")) metabolite_network <- simulated_data %>%     nc_standardize(starts_with(\"metabolite\")) %>%      nc_estimate_network(starts_with(\"metabolite\"))  edge_table <- as_edge_tbl(metabolite_network) edge_table metabolite_network <- simulated_data %>%     nc_standardize(starts_with(\"metabolite\"),                    regressed_on = \"age\") %>%     nc_estimate_network(starts_with(\"metabolite\"))"},{"path":"https://netcoupler.github.io/NetCoupler/articles/examples.html","id":"outcome-vs-exposure-side","dir":"Articles","previous_headings":"Pre-processing","what":"Outcome vs exposure side","title":"Examples of using NetCoupler with different models","text":"Let’s revisit image: types models can used either left hand side graph (exposure side) right hand side (outcome). want estimate links exposure side, ’re interested variable might influence network, use nc_estimate_exposure_links() function. interested outcome side, want know network might influence outcome, use nc_estimate_outcome_links() function.","code":"standardized_data %>%   nc_estimate_exposure_links(     edge_tbl = edge_table,     exposure = \"exposure\",     model_function = lm   ) standardized_data %>%   nc_estimate_outcome_links(     edge_tbl = edge_table,     outcome = \"outcome_continuous\",     model_function = lm   )"},{"path":"https://netcoupler.github.io/NetCoupler/articles/examples.html","id":"linear-regression","dir":"Articles","previous_headings":"","what":"Linear regression","title":"Examples of using NetCoupler with different models","text":"easiest probably commonly used modeling method used running NetCoupler. Adding additional arguments settings lm() (glm()) function can done using model_args_list argument.","code":"lm_results <- standardized_data %>%   nc_estimate_outcome_links(     edge_tbl = edge_table,     outcome = \"outcome_continuous\",     model_function = lm   )"},{"path":[]},{"path":"https://netcoupler.github.io/NetCoupler/articles/examples.html","id":"binary-logistic-regression","dir":"Articles","previous_headings":"Logistic regression","what":"Binary Logistic Regression","title":"Examples of using NetCoupler with different models","text":"Probably second common model binary classic logistic regression. Unlike linear regression modeling , need use model_arg_list argument order tell glm() use binomial method model estimation.","code":"glm_bin_results <- standardized_data %>%   nc_estimate_outcome_links(     edge_tbl = edge_table,     outcome = \"outcome_binary\",     model_function = glm,     model_arg_list = list(family = binomial),     exponentiate = TRUE   )"},{"path":"https://netcoupler.github.io/NetCoupler/articles/examples.html","id":"cox-proportional-hazards-regression","dir":"Articles","previous_headings":"","what":"Cox proportional hazards regression","title":"Examples of using NetCoupler with different models","text":"Cox models, response/y variable usually needs survival::Surv() object. can use function outcome/exposure argument nc_estimate_outcome_links() nc_estimate_exposure_links() functions, keep code output bit cleaner, recommend creating survival object beforehand mutate(). might want add clustering calculate robust standard errors add strata variable. add directly adjustment variable argument.","code":"library(survival) cox_surv_data <- standardized_data %>%     mutate(surv_object = Surv(         time = age,         time2 = age + outcome_event_time,         event = outcome_binary     ))   coxph_results <- cox_surv_data %>%   nc_estimate_outcome_links(     edge_tbl = edge_table,     outcome = \"surv_object\",     # Can also use Surv directly.     # outcome = \"Surv(time = time_start, time2 = time_end, event = outcome_binary)\",     model_function = survival::coxph   ) coxph_results_cluster <- cox_surv_data %>%     mutate(age = as.integer(age)) %>%     nc_estimate_outcome_links(         edge_tbl = edge_table,         outcome = \"surv_object\",         adjustment_vars = c(\"strata(age)\", \"cluster(id)\"),         model_function = survival::coxph     )"},{"path":"https://netcoupler.github.io/NetCoupler/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luke Johnston. Author, maintainer, copyright holder. Clemens Wittenbecher. Author, copyright holder. Fabian Eichelmann. Contributor. Helena Zacharias. Contributor. Daniel Ibsen. Contributor.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Johnston L, Wittenbecher C (2025). NetCoupler: Inference Causal Links Network External Variable. R package version 0.1.1.9000, https://github.com/NetCoupler/NetCoupler.","code":"@Manual{,   title = {NetCoupler: Inference of Causal Links Between a Network and an External Variable},   author = {Luke Johnston and Clemens Wittenbecher},   year = {2025},   note = {R package version 0.1.1.9000},   url = {https://github.com/NetCoupler/NetCoupler}, }"},{"path":"https://netcoupler.github.io/NetCoupler/index.html","id":"netcoupler","dir":"","previous_headings":"","what":"Inference of Causal Links Between a Network and an External Variable","title":"Inference of Causal Links Between a Network and an External Variable","text":"goal NetCoupler estimate potential causal links set -omic (e.g. metabolomics, lipidomics) high-dimensional metabolic data conditional dependency network either disease outcome, exposure, . potential causal links classified direct, ambigious, effects. algorithm largely meant used -omic style data generate networks theoretically non-omic data used, tested context. Given algorithms nature, ’s primarily designed used exploration potential mechanisms used complement analyses research question. also used confirm pre-specified explicit hypothesis, similar structural equation models used. However, might niche use. Overview NetCoupler algorithm. might want use NetCoupler? interested asking research question factor might influence another factor might mediate metabolic network. want explore factor might influence metabolic network metabolic network might influence factor. -omic dataset want another method explore relates variable interest. Basically, ’re research question objective general form : Type questions objectives NetCoupler aims help answer. … can ultimately answer looks like: General result NetCoupler provides might help answer question. vignettes available package: Get Started (vignette(\"NetCoupler\")) describes simple overview use NetCoupler, well basic explanation components NetCoupler. Examples different models (vignette(\"examples\")) lists different models ’ve tested work NetCoupler. tried model isn’t listed seen success, let us know opening Issue submitting Pull Request (see contributing guidelines instructions ).","code":""},{"path":"https://netcoupler.github.io/NetCoupler/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Inference of Causal Links Between a Network and an External Variable","text":"install official CRAN version, use: install development version, use:","code":"install.packages(\"NetCoupler\") # install.packages(\"remotes\") remotes::install_github(\"NetCoupler/NetCoupler\")"},{"path":"https://netcoupler.github.io/NetCoupler/index.html","id":"contributing-and-code-of-conduct","dir":"","previous_headings":"","what":"Contributing and Code of Conduct","title":"Inference of Causal Links Between a Network and an External Variable","text":"Checkout guidelines details contributing. Please note ‘NetCoupler’ project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/NetCoupler-package.html","id":null,"dir":"Reference","previous_headings":"","what":"NetCoupler: Inference of Causal Links Between a Network and an External Variable — NetCoupler-package","title":"NetCoupler: Inference of Causal Links Between a Network and an External Variable — NetCoupler-package","text":"'NetCoupler' algorithm identifies potential direct effects correlated, high-dimensional variables formed network external variable. external variable may act dependent/response variable independent/predictor variable network.","code":""},{"path":[]},{"path":"https://netcoupler.github.io/NetCoupler/reference/NetCoupler-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"NetCoupler: Inference of Causal Links Between a Network and an External Variable — NetCoupler-package","text":"Maintainer: Luke Johnston lwjohnst@gmail.com (ORCID) [copyright holder] Authors: Clemens Wittenbecher Clemens.Wittenbecher@dife.de (ORCID) [copyright holder] contributors: Fabian Eichelmann Fabian.Eichelmann@dife.de [contributor] Helena Zacharias helena.zacharias@helmholtz-muenchen.de [contributor] Daniel Ibsen dbi@ph.au.dk (ORCID) [contributor]","code":""},{"path":[]},{"path":"https://netcoupler.github.io/NetCoupler/reference/as_edge_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert network graphs to edge tables as tibbles/data.frames. — as_edge_tbl","text":"","code":"as_edge_tbl(network_object)"},{"path":"https://netcoupler.github.io/NetCoupler/reference/as_edge_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert network graphs to edge tables as tibbles/data.frames. — as_edge_tbl","text":"network_object Network graph nc_estimate_network().","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/as_edge_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert network graphs to edge tables as tibbles/data.frames. — as_edge_tbl","text":"tibble, least two columns: source_node: starting node (variable). target_node: ending node (variable) links source node. adjacency_weight: (Optional) \"weight\" given edge, represents strength link two nodes.","code":""},{"path":[]},{"path":"https://netcoupler.github.io/NetCoupler/reference/classify_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Classification options for direct, ambigious, and no effect. — classify_options","title":"Classification options for direct, ambigious, and no effect. — classify_options","text":"Classification options direct, ambigious, effect.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/classify_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classification options for direct, ambigious, and no effect. — classify_options","text":"","code":"classify_options(   single_metabolite_threshold = 0.05,   network_threshold = 0.1,   direct_effect_adjustment = NA )"},{"path":"https://netcoupler.github.io/NetCoupler/reference/classify_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classification options for direct, ambigious, and no effect. — classify_options","text":"single_metabolite_threshold, network_threshold, direct_effect_adjustment See classify_option_list argument nc_estimate_links details.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/classify_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classification options for direct, ambigious, and no effect. — classify_options","text":"List options classification.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_estimate_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute model estimates between an external (exposure or outcome) variable and a network. — nc_estimate_links","title":"Compute model estimates between an external (exposure or outcome) variable and a network. — nc_estimate_links","text":"main function identifies potential links external factors network. two functions estimate classify links: nc_estimate_exposure_links(): Computes model estimates exposure side. nc_estimate_outcome_links(): Computes model estimates exposure side.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_estimate_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute model estimates between an external (exposure or outcome) variable and a network. — nc_estimate_links","text":"","code":"nc_estimate_exposure_links(   data,   edge_tbl,   exposure,   adjustment_vars = NA,   model_function,   model_arg_list = NULL,   exponentiate = FALSE,   classify_option_list = classify_options() )  nc_estimate_outcome_links(   data,   edge_tbl,   outcome,   adjustment_vars = NA,   model_function,   model_arg_list = NULL,   exponentiate = FALSE,   classify_option_list = classify_options() )"},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_estimate_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute model estimates between an external (exposure or outcome) variable and a network. — nc_estimate_links","text":"data data.frame tibble contains variables interest, including variables used make network. edge_tbl Output graph object nc_estimate_network(), converted edge table using as_edge_tbl(). exposure, outcome Character. exposure outcome variable interest. adjustment_vars Optional. Variables adjust models. model_function function model use (e.g. stats::lm(), stats::glm(), survival::coxph()). Can model long function arguments formula data. Type model function bare object (without (), instance lm). model_arg_list Optional. list containing named arguments passed model function. simple example list(family = binomial(link = \"logit\")) specify glm model logistic model linear one. See examples usage. exponentiate Logical. Whether exponentiate log estimates, computed e.g. logistic regression models. classify_option_list list classification options direct, ambigious, effects. Used classify_options() function arguments: single_metabolite_threshold: Default 0.05. P-values models index metabolite (neighbour adjustment) classified effects threshold. larger sample sizes networks, recommend lowering threshold reduce risk false positives. network_threshold: Default 0.1. P-values models direct neighbour adjustments classified effects threshold. assumed one-sided p-value threshold. Like threshold , lower value used larger sample sizes networks. direct_effect_adjustment: Default NA. running algorithm , sometimes useful adjust direct effects identified confirm whether links exist.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_estimate_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute model estimates between an external (exposure or outcome) variable and a network. — nc_estimate_links","text":"Outputs tibble contains model estimates either exposure outcome side network well effect classification. row represents \"neighbour node adjusted\" model results outcome/exposure index node pathway. Columns outcome : outcome exposure: name variable used external variable. index_node: name metabolite used index node network. combination outcome/exposure variable, represent individual model used classification. estimate: estimate outcome/exposure index node model. std_error: standard error outcome/exposure index node model. fdr_p_value: False Discovery Rate-adjusted p-value outcome/exposure index node model. effect: NetCoupler classified effect index node outcome/exposure. Effects classified \"direct\" (probable link based given thresholds), \"ambigious\" (potential link thresholds passed), \"none\" (potential link seen). tibble output also attribute contains models generated classification. Access attr(output, \"all_models_df\").","code":""},{"path":[]},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_estimate_links.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute model estimates between an external (exposure or outcome) variable and a network. — nc_estimate_links","text":"","code":"standardized_data <- simulated_data %>%     nc_standardize(starts_with(\"metabolite\"))  metabolite_network <- simulated_data %>%     nc_standardize(starts_with(\"metabolite\"),                    regressed_on = \"age\") %>%     nc_estimate_network(starts_with(\"metabolite\")) edge_table <- as_edge_tbl(metabolite_network)  results <- standardized_data %>%   nc_estimate_exposure_links(     edge_tbl = edge_table,     exposure = \"exposure\",     model_function = lm    ) results #> # A tibble: 12 × 6 #>    exposure index_node    estimate std_error fdr_p_value effect    #>  * <chr>    <chr>            <dbl>     <dbl>       <dbl> <chr>     #>  1 exposure metabolite_1   0.173      0.0228      0      direct    #>  2 exposure metabolite_10  0.318      0.0219      0      direct    #>  3 exposure metabolite_11  0.0543     0.0232      0.0409 ambiguous #>  4 exposure metabolite_12  0.0242     0.0231      0.380  none      #>  5 exposure metabolite_2  -0.0430     0.0231      0.106  ambiguous #>  6 exposure metabolite_3   0.0411     0.0231      0.123  ambiguous #>  7 exposure metabolite_4   0.00344    0.0232      0.920  none      #>  8 exposure metabolite_5   0.0479     0.0232      0.0717 ambiguous #>  9 exposure metabolite_6  -0.0189     0.0230      0.506  none      #> 10 exposure metabolite_7  -0.162      0.0229      0      direct    #> 11 exposure metabolite_8  -0.355      0.0216      0      direct    #> 12 exposure metabolite_9   0.0571     0.0230      0.0292 ambiguous  # Get results of all models used prior to classification"},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_estimate_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an estimate of the metabolic network as an undirected graph. — nc_estimate_network","title":"Create an estimate of the metabolic network as an undirected graph. — nc_estimate_network","text":"main NetCoupler network creator. Uses input data estimate underlying undirected graph. default uses PC algorithm, implemented within NetCoupler pc_estimate_undirected_graph() Defaults using PC algorithm calculate possible edges. missing values input data removed function, since computations handle missingness.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_estimate_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an estimate of the metabolic network as an undirected graph. — nc_estimate_network","text":"","code":"nc_estimate_network(data, cols = everything(), alpha = 0.01)"},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_estimate_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an estimate of the metabolic network as an undirected graph. — nc_estimate_network","text":"data Data form underlying network. cols <tidy-select> Variables include using dplyr::select() style selection. alpha alpha level use test whether edge exists . Default 0.01.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_estimate_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an estimate of the metabolic network as an undirected graph. — nc_estimate_network","text":"Outputs tidygraph::tbl_graph() start end nodes, well edge weights.","code":""},{"path":[]},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_standardize.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize the metabolic variables. — nc_standardize","title":"Standardize the metabolic variables. — nc_standardize","text":"Can standardize either 1) log()-transforming applying scale() (mean-center scaled standard deviation), 2) regressed_on variables given, log-transforming, running linear regression obtain stats::residuals(), finally scaled. Use regressed_on try remove influence potential confounding.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_standardize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize the metabolic variables. — nc_standardize","text":"","code":"nc_standardize(data, cols = everything(), regressed_on = NULL)"},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_standardize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize the metabolic variables. — nc_standardize","text":"data Data frame. cols Metabolic variables make network. regressed_on Optional. character vector variables regress metabolic variables . Use want standardize metabolic variables variables known influence , e.g. sex age. Calculates residuals linear regression model.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_standardize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize the metabolic variables. — nc_standardize","text":"Outputs tibble object, original metabolic variables now standardized.","code":""},{"path":[]},{"path":"https://netcoupler.github.io/NetCoupler/reference/nc_standardize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize the metabolic variables. — nc_standardize","text":"","code":"# Don't regress on any variable simulated_data %>%   nc_standardize(starts_with(\"metabolite_\")) #> # A tibble: 2,000 × 18 #>    metabolite_1 metabolite_2 metabolite_3 metabolite_4 metabolite_5 metabolite_6 #>           <dbl>        <dbl>        <dbl>        <dbl>        <dbl>        <dbl> #>  1        0.318        0.105       1.30         NA           -0.181      -0.441  #>  2       -1.06         0.622      -1.04         -0.113       -2.14       -0.774  #>  3       -0.467        1.04        1.13          0.888        0.910      -0.280  #>  4        1.16         0.162       0.115        -0.664        0.730      -0.202  #>  5        0.336       -2.80        1.19          1.66         1.02        1.25   #>  6        0.114        0.319      -0.0494       -1.34        -0.192       0.442  #>  7        0.586        0.232       0.533         1.84         0.822      -1.58   #>  8        0.959       -0.763      -0.375         0.523        1.29        1.24   #>  9       -0.589       -1.01       -0.241        -1.28        -0.789      -0.0464 #> 10       -0.516       -0.575       0.484        -0.369       -0.432       1.48   #> # ℹ 1,990 more rows #> # ℹ 12 more variables: metabolite_7 <dbl>, metabolite_8 <dbl>, #> #   metabolite_9 <dbl>, metabolite_10 <dbl>, outcome_continuous <dbl>, #> #   metabolite_12 <dbl>, metabolite_11 <dbl>, exposure <dbl>, age <dbl>, #> #   id <int>, outcome_event_time <dbl>, outcome_binary <int>  # Extract residuals by regressing on a variable simulated_data %>%   nc_standardize(starts_with(\"metabolite_\"), \"age\") #> # A tibble: 2,000 × 18 #>    metabolite_1 metabolite_2 metabolite_3 metabolite_4 metabolite_5 metabolite_6 #>           <dbl>        <dbl>        <dbl>        <dbl>        <dbl>        <dbl> #>  1        0.296        0.121       1.28        NA            -0.198      -0.457  #>  2       -1.07         0.626      -1.04        -0.0980       -2.16       -0.781  #>  3       -0.483        1.05        1.11         0.920         0.902      -0.289  #>  4        1.18         0.147       0.137       -0.714         0.745      -0.191  #>  5        0.339       -2.80        1.19         1.66          1.02        1.25   #>  6        0.108        0.322      -0.0530      -1.33         -0.197       0.440  #>  7        0.584        0.234       0.532        1.84          0.822      -1.59   #>  8        0.971       -0.770      -0.362        0.497         1.30        1.25   #>  9       -0.616       -0.994      -0.264       -1.22         -0.809      -0.0623 #> 10       -0.528       -0.568       0.476       -0.346        -0.440       1.48   #> # ℹ 1,990 more rows #> # ℹ 12 more variables: metabolite_7 <dbl>, metabolite_8 <dbl>, #> #   metabolite_9 <dbl>, metabolite_10 <dbl>, outcome_continuous <dbl>, #> #   metabolite_12 <dbl>, metabolite_11 <dbl>, exposure <dbl>, age <dbl>, #> #   id <int>, outcome_event_time <dbl>, outcome_binary <int>  # Works with factors too simulated_data %>%   dplyr::mutate(Sex = as.factor(sample(rep(c(\"F\", \"M\"), times = nrow(.) / 2)))) %>%   nc_standardize(starts_with(\"metabolite_\"), c(\"age\", \"Sex\")) #> # A tibble: 2,000 × 19 #>    metabolite_1 metabolite_2 metabolite_3 metabolite_4 metabolite_5 metabolite_6 #>           <dbl>        <dbl>        <dbl>        <dbl>        <dbl>        <dbl> #>  1        0.231       0.0720       1.25         NA           -0.225      -0.475  #>  2       -1.13        0.579       -1.07         -0.104       -2.18       -0.799  #>  3       -0.422       1.10         1.14          0.926        0.928      -0.272  #>  4        1.12        0.102        0.112        -0.719        0.720      -0.207  #>  5        0.276      -2.85         1.17          1.65         0.997       1.24   #>  6        0.171       0.369       -0.0268       -1.32        -0.171       0.457  #>  7        0.522       0.187        0.506         1.84         0.796      -1.61   #>  8        0.911      -0.816       -0.387         0.491        1.28        1.23   #>  9       -0.683      -1.04        -0.292        -1.23        -0.837      -0.0806 #> 10       -0.466      -0.522        0.502        -0.340       -0.415       1.50   #> # ℹ 1,990 more rows #> # ℹ 13 more variables: metabolite_7 <dbl>, metabolite_8 <dbl>, #> #   metabolite_9 <dbl>, metabolite_10 <dbl>, outcome_continuous <dbl>, #> #   metabolite_12 <dbl>, metabolite_11 <dbl>, exposure <dbl>, age <dbl>, #> #   id <int>, outcome_event_time <dbl>, outcome_binary <int>, Sex <fct>"},{"path":"https://netcoupler.github.io/NetCoupler/reference/pc_estimate_undirected_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the undirected graph of the metabolic data. — pc_estimate_undirected_graph","title":"Estimate the undirected graph of the metabolic data. — pc_estimate_undirected_graph","text":"Uses PC-algorithm mostly wrapper around pcalg::skeleton().","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/pc_estimate_undirected_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the undirected graph of the metabolic data. — pc_estimate_undirected_graph","text":"","code":"pc_estimate_undirected_graph(data, alpha = 0.01)"},{"path":"https://netcoupler.github.io/NetCoupler/reference/pc_estimate_undirected_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the undirected graph of the metabolic data. — pc_estimate_undirected_graph","text":"data Input numeric data forms basis underlying graph. alpha Significance level threshold applied test determine conditional dependence edge exists.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/pc_estimate_undirected_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the undirected graph of the metabolic data. — pc_estimate_undirected_graph","text":"pcAlgo object contains DAG skeleton, aka undirected graph.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/pc_estimate_undirected_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the undirected graph of the metabolic data. — pc_estimate_undirected_graph","text":"function estimates \"skeleton DAG\", meaning graph without arrowheads, aka undirected graph. default estimation method used \"PC-stable\" method, estimates order-independent skeleton DAG, meaning order variables given impact results (older versions algorithm order-dependent). method also assumes latent variables. edge determined testing conditional dependence two nodes based pcalg::gaussCItest(). Conditional independence exists nodes zero partial correlation determined p-value based hypothesis test correlation matrix data nodes. estimated edges exists start end nodes start end variables conditionally dependent given subset remaining variables.","code":""},{"path":[]},{"path":"https://netcoupler.github.io/NetCoupler/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://netcoupler.github.io/NetCoupler/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. tibble as_data_frame, as_tibble, data_frame, tibble tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/simulated_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated dataset with an underlying Directed Graph structure for the metabolites. — simulated_data","title":"Simulated dataset with an underlying Directed Graph structure for the metabolites. — simulated_data","text":"Simulated dataset underlying Directed Graph structure metabolites.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/reference/simulated_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated dataset with an underlying Directed Graph structure for the metabolites. — simulated_data","text":"","code":"simulated_data"},{"path":"https://netcoupler.github.io/NetCoupler/reference/simulated_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated dataset with an underlying Directed Graph structure for the metabolites. — simulated_data","text":"simulated dataset tibble following variables: Two outcome variables (outcome_continuous outcome_binary) along survival time (outcome_event_time) used outcome_binary variable generic exposure variable continuous 12 metabolite_* variables age variable used confounder","code":""},{"path":[]},{"path":"https://netcoupler.github.io/NetCoupler/news/index.html","id":"netcoupler-011","dir":"Changelog","previous_headings":"","what":"NetCoupler 0.1.1","title":"NetCoupler 0.1.1","text":"CRAN release: 2025-05-20","code":""},{"path":"https://netcoupler.github.io/NetCoupler/news/index.html","id":"fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Fixes","title":"NetCoupler 0.1.1","text":"Switched using lifecycle::badge() Roxygen docs CRAN Note. Converted .data$ simply \"\" functions fix test warnings dplyr.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/news/index.html","id":"internals-0-1-1","dir":"Changelog","previous_headings":"","what":"Internals","title":"NetCoupler 0.1.1","text":"Set rhub GitHub Action workflow check CRAN compatibility fully. Remove Codecov issues connection .","code":""},{"path":"https://netcoupler.github.io/NetCoupler/news/index.html","id":"netcoupler-010","dir":"Changelog","previous_headings":"","what":"NetCoupler 0.1.0","title":"NetCoupler 0.1.0","text":"CRAN release: 2022-04-08 General preparation submitting package CRAN.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"NetCoupler 0.1.0","text":"Added nc_estimate_* function output full model list attribute, really necessary interested underlying models used classifying effects Added continuous outcome variable simulated data also links DAG linkage obvious (#97) Added function create edge table (#117) Incorporate tidyselect helpers functions selection variables (#62) Added Getting Started vignette article examples using different models (#70) Added argument nc_estimate_*_links() functions set thresholds classifying links (#157) Added weights included as_edge_tbl() (#142)","code":""},{"path":"https://netcoupler.github.io/NetCoupler/news/index.html","id":"removed-features-0-1-0","dir":"Changelog","previous_headings":"","what":"Removed features","title":"NetCoupler 0.1.0","text":"Removed nc_classify_effects() nc_filter_estimates(), merged two main estimation functions instead Model summary statistics lm glm models removed improving computing speed (slowed things quite bit)","code":""},{"path":"https://netcoupler.github.io/NetCoupler/news/index.html","id":"internal-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"NetCoupler 0.1.0","text":"Output models used classification attribute nc_estimate_* functions output Use lavaan instead dagitty generate simulated data Use standard GitHub Actions remove AppVeyor Refactored code within estimation method runs faster Tidied unit tests run faster Removed duplicate extra roxygen examples instead referenced common source @seealso Removed survival dependency Switch using main instead master branch","code":""},{"path":[]},{"path":"https://netcoupler.github.io/NetCoupler/news/index.html","id":"added-features-0-0-4","dir":"Changelog","previous_headings":"","what":"Added features","title":"NetCoupler 0.0.4","text":"lm glm models, model summary statistics added (#88). Add function classify direct effects outcome exposure network (#98). Add function plot network graph: nc_plot_network() (#89, #110). Added helper functions nc_adjacency_graph(), nc_adjacency_matrix(), nc_partial_corr_matrix() help create weights network plot. (Issue #80, PR #89). Removed soft deprecated functions. Using MuMIn glmulti doesn’t change results much, see #60 details (#83). Removed stringr dependency (#65, #83).","code":""},{"path":"https://netcoupler.github.io/NetCoupler/news/index.html","id":"fixed-bugs-and-other-problems-0-0-4","dir":"Changelog","previous_headings":"","what":"Fixed bugs and other problems","title":"NetCoupler 0.0.4","text":"Fix bug many digits caused problem pcor() (#125, #131). Fix bug didn’t properly filter variables identify neighbour nodes nc_filter_estimates() (#109). Fix problem nc_standardize() prevented ability use .regressed_on. argument extract residuals (#108). Input dataset can include missingness. Input data treated complete case variables used modelling (#88).","code":""},{"path":"https://netcoupler.github.io/NetCoupler/news/index.html","id":"internal-changes-0-0-4","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"NetCoupler 0.0.4","text":"Rewrote underlying model estimation algorithm doesn’t use MuMIn one unified function outcome exposure side estimation (#101)","code":""},{"path":"https://netcoupler.github.io/NetCoupler/news/index.html","id":"netcoupler-0039000","dir":"Changelog","previous_headings":"","what":"NetCoupler 0.0.3.9000","title":"NetCoupler 0.0.3.9000","text":"Add nc_standardize() function standardize metabolic variables (#73). Export tidyselect functions like matches() starts_with() (#73). Add CONTRIBUTING guidelines (#56). Add lifecycle badges functions, soft deprecating net_coupler_out(), getExp.coef.permetabolite(), getExp.coef.() (#59) Add defensive checks input arguments assertive.types (#59). Add AppVeyor repo. Started Travis run repo (#61). Added function exposure side estimation: nc_exposure_estimates()","code":""},{"path":"https://netcoupler.github.io/NetCoupler/news/index.html","id":"netcoupler-0029000","dir":"Changelog","previous_headings":"","what":"NetCoupler 0.0.2.9000","title":"NetCoupler 0.0.2.9000","text":"Major revision underlying code generating outcome-network link estimation (#55), resulting created streamlined nc_outcome_estimates() function. streamlining, code much faster move use MuMIn can remove dependency rJava via glmulti. Tidied nc_create_network() function graph skeleton output (#55). Started cleaning , along leftover files. Updated generated documentation nc_create_network(). Added unit tests nc_create_network() outcome estimation functions. Travis code coverage added well. Renamed nc_make_network() nc_create_network() moved file. Modularized nc_make_network() code moved another file.","code":""},{"path":"https://netcoupler.github.io/NetCoupler/news/index.html","id":"netcoupler-0019000","dir":"Changelog","previous_headings":"","what":"NetCoupler 0.0.1.9000","title":"NetCoupler 0.0.1.9000","text":"Added NEWS.md file track changes package. Added package infrastructure Added initial code projects use Added basic introduction vignette","code":""}]
